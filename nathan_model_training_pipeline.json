{
  "components": {
    "comp-data-transformation-component": {
      "executorLabel": "exec-data-transformation-component",
      "inputDefinitions": {
        "parameters": {
          "raw_dataset_uri": {
            "parameterType": "STRING"
          },
          "train_test_split_ratio": {
            "parameterType": "NUMBER_DOUBLE"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "test_dataset": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          },
          "train_dataset": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-data-transformation-component": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "data_transformation_component"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'pandas>=2.3.2' 'datasets==4.0.0' 'gcsfs'  &&  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef data_transformation_component(\n    raw_dataset_uri: str,\n    train_test_split_ratio: float,\n    train_dataset: OutputPath(\"Dataset\"),  # type: ignore\n    test_dataset: OutputPath(\"Dataset\"),  # type: ignore\n) -> None:\n    \"\"\"Format and split Yoda Sentences for Phi-3 fine-tuning.\"\"\"\n    import logging\n\n    import pandas as pd\n    from datasets import Dataset\n\n    def format_dataset_to_phi_messages(dataset: Dataset) -> Dataset:\n        \"\"\"Format dataset to Phi messages structure.\"\"\"\n\n        def format_dataset(examples):\n            \"\"\"Format a single example to Phi messages structure.\"\"\"\n            converted_sample = [\n                {\"role\": \"user\", \"content\": examples[\"prompt\"]},\n                {\"role\": \"assistant\", \"content\": examples[\"completion\"]},\n            ]\n            return {\"messages\": converted_sample}\n\n        return (\n            dataset.rename_column(\"sentence\", \"prompt\")\n            .rename_column(\"translation_extra\", \"completion\")\n            .map(format_dataset)\n            .remove_columns([\"prompt\", \"completion\", \"translation\"])\n        )\n\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(__name__)\n    logger.info(\"Starting data transformation process...\")\n\n    logger.info(f\"Reading from {raw_dataset_uri}\")\n    dataset = Dataset.from_pandas(pd.read_csv(raw_dataset_uri))\n\n    logger.info(\"Formatting and splitting dataset...\")\n    formatted_dataset = format_dataset_to_phi_messages(dataset)\n    split_dataset = formatted_dataset.train_test_split(test_size=train_test_split_ratio)\n\n    logger.info(f\"Writing train dataset to {train_dataset}...\")\n    split_dataset[\"train\"].to_csv(train_dataset, index=False)\n\n    logger.info(f\"Writing test dataset to {test_dataset}...\")\n    split_dataset[\"test\"].to_csv(test_dataset, index=False)\n\n    logger.info(\"Data transformation process completed successfully\")\n\n"
          ],
          "image": "python:3.11-slim"
        }
      }
    }
  },
  "pipelineInfo": {
    "description": "Model training pipeline definition.",
    "name": "nathan-model-training-pipeline"
  },
  "root": {
    "dag": {
      "tasks": {
        "data-transformation-component": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-data-transformation-component"
          },
          "inputs": {
            "parameters": {
              "raw_dataset_uri": {
                "componentInputParameter": "raw_dataset_uri"
              },
              "train_test_split_ratio": {
                "runtimeValue": {
                  "constant": 0.1
                }
              }
            }
          },
          "taskInfo": {
            "name": "data-transformation-component"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "raw_dataset_uri": {
          "parameterType": "STRING"
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.14.6"
}